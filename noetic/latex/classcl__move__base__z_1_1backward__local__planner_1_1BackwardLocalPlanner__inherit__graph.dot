digraph "cl_move_base_z::backward_local_planner::BackwardLocalPlanner"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [label="{cl_move_base_z::backward\l_local_planner::BackwardLocalPlanner\n|- paramServer_\l- f\l- backwardsPlanPath_\l- costmapRos_\l- goalMarkerPublisher_\l- k_rho_\l- k_alpha_\l- k_betta_\l- pure_spinning_allowed\l_betta_error_\l- linear_mode_rho_error\l_threshold_\l- goalReached_\l- initialPureSpinningStage_\l- straightBackwardsAndPure\lSpinningMode_\l- enable_obstacle_checking_\l- inGoalPureSpinningState_\l- alpha_offset_\l- betta_offset_\l- yaw_goal_tolerance_\l- xy_goal_tolerance_\l- carrot_distance_\l- carrot_angular_distance_\l- divergenceDetectionLastCarrot\lLinearDistance_\l- max_linear_x_speed_\l- max_angular_z_speed_\l- currentCarrotPoseIndex_\l- waiting_\l- waitingTimeout_\l- waitingStamp_\l|+ BackwardLocalPlanner()\l+ ~BackwardLocalPlanner()\l+ computeVelocityCommands()\l+ isGoalReached()\l+ setPlan()\l+ initialize()\l+ initialize()\l+ initialize()\l- reconfigCB()\l- findInitialCarrotGoal()\l- updateCarrotGoal()\l- resamplePrecisePlan()\l- straightBackwardsAndPure\lSpinCmd()\l- defaultBackwardCmd()\l- publishGoalMarker()\l- computeCurrentEuclideanAnd\lAngularErrorsToCarrotGoal()\l- checkCurrentPoseInGoalRange()\l- resetDivergenceDetection()\l- divergenceDetectionUpdate()\l- checkCarrotHalfPlainConstraint()\l- generateTrajectory()\l- computeNewPositions()\l}",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="steelblue1",style="solid",arrowtail="onormal"];
  Node2 [label="{nav_core::BaseLocalPlanner\n||}",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",tooltip=" "];
}
